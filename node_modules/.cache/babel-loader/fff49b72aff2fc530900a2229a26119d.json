{"ast":null,"code":"import { extractEdgesAndNodes } from './utils';\nimport { ACTIONS } from '../constants';\n// old\n// export const onFetchQuery = (result, query, oldNodeLabels, dispatch) => {\n//   const { nodes, edges, nodeLabels } = extractEdgesAndNodes(result.data, oldNodeLabels);\n//   console.log('result', result);\n//   dispatch({ type: ACTIONS.ADD_NODES, payload: nodes });\n//   dispatch({ type: ACTIONS.ADD_EDGES, payload: edges });\n//   dispatch({ type: ACTIONS.SET_NODE_LABELS, payload: nodeLabels });\n//   console.log(nodeLabels);\n//   console.log(query);\n\n//   // dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query });\n// };\n\nexport const onFetchQuery = (result, query, oldNodeLabels, dispatch) => {\n  // Parse the response from the gremlin-server\n  const {\n    nodes,\n    edges,\n    nodeLabels\n  } = extractEdgesAndNodes(result.data, oldNodeLabels);\n  console.log('result', result);\n  dispatch({\n    type: ACTIONS.ADD_NODES,\n    payload: nodes\n  });\n  // return { nodes, edges, nodeLabels }\n  // console.log(nodes);\n  // console.log(edges);\n\n  // dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query });\n};\n\nexport const setError = () => {\n  return {\n    type: \"SET_ERROR\",\n    payload: null\n  };\n};","map":{"version":3,"names":["extractEdgesAndNodes","ACTIONS","onFetchQuery","result","query","oldNodeLabels","dispatch","nodes","edges","nodeLabels","data","console","log","type","ADD_NODES","payload","setError"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/logics/actionHelper.js"],"sourcesContent":["import { extractEdgesAndNodes } from './utils';\nimport { ACTIONS } from '../constants';\n// old\n// export const onFetchQuery = (result, query, oldNodeLabels, dispatch) => {\n//   const { nodes, edges, nodeLabels } = extractEdgesAndNodes(result.data, oldNodeLabels);\n//   console.log('result', result);\n//   dispatch({ type: ACTIONS.ADD_NODES, payload: nodes });\n//   dispatch({ type: ACTIONS.ADD_EDGES, payload: edges });\n//   dispatch({ type: ACTIONS.SET_NODE_LABELS, payload: nodeLabels });\n//   console.log(nodeLabels);\n//   console.log(query);\n\n//   // dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query });\n// };\n\n\nexport const onFetchQuery = (result, query, oldNodeLabels,dispatch) => {\n  // Parse the response from the gremlin-server\n  const { nodes, edges, nodeLabels } = extractEdgesAndNodes(result.data, oldNodeLabels);\n  console.log('result', result);\n  dispatch({ type: ACTIONS.ADD_NODES, payload: nodes });\n  // return { nodes, edges, nodeLabels }\n  // console.log(nodes);\n  // console.log(edges);\n\n  // dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query });\n};\n\nexport const setError = () => {\n  return {\n      type: \"SET_ERROR\",\n      payload: null\n  }\n};\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,OAAO,QAAQ,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAG,CAACC,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAACC,QAAQ,KAAK;EACrE;EACA,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGT,oBAAoB,CAACG,MAAM,CAACO,IAAI,EAAEL,aAAa,CAAC;EACrFM,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAET,MAAM,CAAC;EAC7BG,QAAQ,CAAC;IAAEO,IAAI,EAAEZ,OAAO,CAACa,SAAS;IAAEC,OAAO,EAAER;EAAM,CAAC,CAAC;EACrD;EACA;EACA;;EAEA;AACF,CAAC;;AAED,OAAO,MAAMS,QAAQ,GAAG,MAAM;EAC5B,OAAO;IACHH,IAAI,EAAE,WAAW;IACjBE,OAAO,EAAE;EACb,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}