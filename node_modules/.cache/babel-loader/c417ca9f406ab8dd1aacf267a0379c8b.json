{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Network } from 'vis-network';\nimport { ACTIONS } from '../../constants';\nfunction NetworkGraph(props) {\n  // componentDidMount() {\n  //   const data = {\n  //     nodes: this.props.nodeHolder,\n  //     edges: this.props.edgeHolder\n  //   };\n\n  //   const network = new vis.Network(this.refs.myRef, data, this.props.networkOptions);\n  //   // If you select the node\n  //   network.on('selectNode', (params) => {\n  //     const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n  //     this.props.dispatch({ type: ACTIONS.SET_SELECTED_NODE, payload: nodeId });\n  //   });\n  //   // If you select the edge\n  //   network.on(\"selectEdge\", (params) => {\n  //     const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n  //     const isNodeSelected = params.nodes && params.nodes.length > 0;\n  //     if (!isNodeSelected && edgeId !== null) {\n  //       this.props.dispatch({ type: ACTIONS.SET_SELECTED_EDGE, payload: edgeId });\n  //     }\n  //   });\n\n  //   this.props.dispatch({ type: ACTIONS.SET_NETWORK, payload: network });\n  // }\n  const container = useRef(null);\n  useEffect(() => {\n    const data = {\n      nodes: props.nodeHolder,\n      edges: props.edgeHolder\n    };\n    const options = {};\n    const network = container.current && new Network(container.current, data, options);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: container,\n    className: 'mynetwork',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  });\n}\nexport const NetworkGraphComponent = connect(state => {\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);","map":{"version":3,"names":["React","useEffect","useRef","connect","Network","ACTIONS","NetworkGraph","props","container","data","nodes","nodeHolder","edges","edgeHolder","options","network","current","NetworkGraphComponent","state","graph","networkOptions"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {connect} from 'react-redux';\nimport { Network } from 'vis-network';\nimport { ACTIONS } from '../../constants';\n\nfunction NetworkGraph (props) {\n  // componentDidMount() {\n  //   const data = {\n  //     nodes: this.props.nodeHolder,\n  //     edges: this.props.edgeHolder\n  //   };\n    \n  //   const network = new vis.Network(this.refs.myRef, data, this.props.networkOptions);\n  //   // If you select the node\n  //   network.on('selectNode', (params) => {\n  //     const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n  //     this.props.dispatch({ type: ACTIONS.SET_SELECTED_NODE, payload: nodeId });\n  //   });\n  //   // If you select the edge\n  //   network.on(\"selectEdge\", (params) => {\n  //     const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n  //     const isNodeSelected = params.nodes && params.nodes.length > 0;\n  //     if (!isNodeSelected && edgeId !== null) {\n  //       this.props.dispatch({ type: ACTIONS.SET_SELECTED_EDGE, payload: edgeId });\n  //     }\n  //   });\n\n  //   this.props.dispatch({ type: ACTIONS.SET_NETWORK, payload: network });\n  // }\n  const container = useRef(null);\n  useEffect(() => {\n    const data = {\n          nodes: props.nodeHolder,\n          edges: props.edgeHolder\n        };\n        const options = {};\n    const network =\n      container.current &&\n      new Network(container.current, data, options);\n  }, []);\n\n\n    return (<div ref={container} className={'mynetwork'} />);\n  \n}\n\nexport const NetworkGraphComponent = connect((state)=>{\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAAQC,OAAO,QAAO,aAAa;AACnC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,SAASC,YAAY,CAAEC,KAAK,EAAE;EAC5B;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC9BD,SAAS,CAAC,MAAM;IACd,MAAMQ,IAAI,GAAG;MACPC,KAAK,EAAEH,KAAK,CAACI,UAAU;MACvBC,KAAK,EAAEL,KAAK,CAACM;IACf,CAAC;IACD,MAAMC,OAAO,GAAG,CAAC,CAAC;IACtB,MAAMC,OAAO,GACXP,SAAS,CAACQ,OAAO,IACjB,IAAIZ,OAAO,CAACI,SAAS,CAACQ,OAAO,EAAEP,IAAI,EAAEK,OAAO,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAGJ,oBAAQ;IAAK,GAAG,EAAEN,SAAU;IAAC,SAAS,EAAE,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG;AAE3D;AAEA,OAAO,MAAMS,qBAAqB,GAAGd,OAAO,CAAEe,KAAK,IAAG;EACpD,OAAO;IACLP,UAAU,EAAEO,KAAK,CAACC,KAAK,CAACR,UAAU;IAClCE,UAAU,EAAEK,KAAK,CAACC,KAAK,CAACN,UAAU;IAClCO,cAAc,EAAEF,KAAK,CAACJ,OAAO,CAACM;EAChC,CAAC;AACH,CAAC,CAAC,CAACd,YAAY,CAAC"},"metadata":{},"sourceType":"module"}