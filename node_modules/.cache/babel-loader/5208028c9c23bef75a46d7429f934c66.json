{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport vis from 'vis-network';\nimport { ACTIONS } from '../../constants';\nfunction NetworkGraph(props) {\n  // componentDidMount() {\n  //   const data = {\n  //     nodes: props.nodeHolder,\n  //     edges: props.edgeHolder\n  //   };\n  useEffect(() => {\n    const data = {\n      nodes: props.nodeHolder,\n      edges: props.edgeHolder\n    };\n  }, {\n    nodes: 1,\n    edges: 2\n  });\n  const network = new vis.Network(refs.myRef, data, props.networkOptions);\n  // If you select the node\n  network.on('selectNode', params => {\n    const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n    props.dispatch({\n      type: ACTIONS.SET_SELECTED_NODE,\n      payload: nodeId\n    });\n  });\n  // If you select the edge\n  network.on(\"selectEdge\", params => {\n    const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n    const isNodeSelected = params.nodes && params.nodes.length > 0;\n    if (!isNodeSelected && edgeId !== null) {\n      props.dispatch({\n        type: ACTIONS.SET_SELECTED_EDGE,\n        payload: edgeId\n      });\n    }\n  });\n  props.dispatch({\n    type: ACTIONS.SET_NETWORK,\n    payload: network\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: 'myRef',\n    className: 'mynetwork',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  });\n}\nexport const NetworkGraphComponent = connect(state => {\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);","map":{"version":3,"names":["React","useEffect","connect","vis","ACTIONS","NetworkGraph","props","data","nodes","nodeHolder","edges","edgeHolder","network","Network","refs","myRef","networkOptions","on","params","nodeId","length","dispatch","type","SET_SELECTED_NODE","payload","edgeId","isNodeSelected","SET_SELECTED_EDGE","SET_NETWORK","NetworkGraphComponent","state","graph","options"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport {connect} from 'react-redux';\nimport vis from 'vis-network';\nimport { ACTIONS } from '../../constants';\n\nfunction NetworkGraph (props) {\n  // componentDidMount() {\n  //   const data = {\n  //     nodes: props.nodeHolder,\n  //     edges: props.edgeHolder\n  //   };\n    useEffect(() => {\n      const data = {\n        nodes: props.nodeHolder,\n        edges: props.edgeHolder\n      }\n     }, {nodes: 1, edges: 2})\n    \n    const network = new vis.Network(refs.myRef, data, props.networkOptions);\n    // If you select the node\n    network.on('selectNode', (params) => {\n      const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n      props.dispatch({ type: ACTIONS.SET_SELECTED_NODE, payload: nodeId });\n    });\n    // If you select the edge\n    network.on(\"selectEdge\", (params) => {\n      const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n      const isNodeSelected = params.nodes && params.nodes.length > 0;\n      if (!isNodeSelected && edgeId !== null) {\n        props.dispatch({ type: ACTIONS.SET_SELECTED_EDGE, payload: edgeId });\n      }\n    });\n\n    props.dispatch({ type: ACTIONS.SET_NETWORK, payload: network });\n    return (<div ref={'myRef'} className={'mynetwork'} />);\n\n}\n\nexport const NetworkGraphComponent = connect((state)=>{\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAQC,OAAO,QAAO,aAAa;AACnC,OAAOC,GAAG,MAAM,aAAa;AAC7B,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,SAASC,YAAY,CAAEC,KAAK,EAAE;EAC5B;EACA;EACA;EACA;EACA;EACEL,SAAS,CAAC,MAAM;IACd,MAAMM,IAAI,GAAG;MACXC,KAAK,EAAEF,KAAK,CAACG,UAAU;MACvBC,KAAK,EAAEJ,KAAK,CAACK;IACf,CAAC;EACF,CAAC,EAAE;IAACH,KAAK,EAAE,CAAC;IAAEE,KAAK,EAAE;EAAC,CAAC,CAAC;EAEzB,MAAME,OAAO,GAAG,IAAIT,GAAG,CAACU,OAAO,CAACC,IAAI,CAACC,KAAK,EAAER,IAAI,EAAED,KAAK,CAACU,cAAc,CAAC;EACvE;EACAJ,OAAO,CAACK,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;IACnC,MAAMC,MAAM,GAAGD,MAAM,CAACV,KAAK,IAAIU,MAAM,CAACV,KAAK,CAACY,MAAM,GAAG,CAAC,GAAGF,MAAM,CAACV,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;IAC/EF,KAAK,CAACe,QAAQ,CAAC;MAAEC,IAAI,EAAElB,OAAO,CAACmB,iBAAiB;MAAEC,OAAO,EAAEL;IAAO,CAAC,CAAC;EACtE,CAAC,CAAC;EACF;EACAP,OAAO,CAACK,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;IACnC,MAAMO,MAAM,GAAGP,MAAM,CAACR,KAAK,IAAIQ,MAAM,CAACR,KAAK,CAACU,MAAM,KAAK,CAAC,GAAGF,MAAM,CAACR,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;IACjF,MAAMgB,cAAc,GAAGR,MAAM,CAACV,KAAK,IAAIU,MAAM,CAACV,KAAK,CAACY,MAAM,GAAG,CAAC;IAC9D,IAAI,CAACM,cAAc,IAAID,MAAM,KAAK,IAAI,EAAE;MACtCnB,KAAK,CAACe,QAAQ,CAAC;QAAEC,IAAI,EAAElB,OAAO,CAACuB,iBAAiB;QAAEH,OAAO,EAAEC;MAAO,CAAC,CAAC;IACtE;EACF,CAAC,CAAC;EAEFnB,KAAK,CAACe,QAAQ,CAAC;IAAEC,IAAI,EAAElB,OAAO,CAACwB,WAAW;IAAEJ,OAAO,EAAEZ;EAAQ,CAAC,CAAC;EAC/D,oBAAQ;IAAK,GAAG,EAAE,OAAQ;IAAC,SAAS,EAAE,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG;AAEzD;AAEA,OAAO,MAAMiB,qBAAqB,GAAG3B,OAAO,CAAE4B,KAAK,IAAG;EACpD,OAAO;IACLrB,UAAU,EAAEqB,KAAK,CAACC,KAAK,CAACtB,UAAU;IAClCE,UAAU,EAAEmB,KAAK,CAACC,KAAK,CAACpB,UAAU;IAClCK,cAAc,EAAEc,KAAK,CAACE,OAAO,CAAChB;EAChC,CAAC;AACH,CAAC,CAAC,CAACX,YAAY,CAAC"},"metadata":{},"sourceType":"module"}