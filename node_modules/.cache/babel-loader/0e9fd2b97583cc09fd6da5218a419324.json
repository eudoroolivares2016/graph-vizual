{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComponent.js\";\nimport React, { useState } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\nimport { query } from 'express';\nfunction Header(props) {\n  // const hostSelector = useSelector((state) => state.gremlin.host)\n  // const dispatcher = useDispatch()\n\n  // const [port, setPort] = useState(8182)\n  // const [host, setHost] = useState('localhost')\n  // const [query, setQuery] = useState('g.V()')\n\n  const saveQuery = () => {\n    props.dispatch({\n      type: ACTIONS.ADD_QUERY_HISTORY,\n      payload: query\n    });\n  };\n  const clearGraph = () => {\n    props.dispatch({\n      type: ACTIONS.CLEAR_GRAPH\n    });\n    // props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  };\n\n  const clearQueryHistory = () => {\n    props.dispatch({\n      type: ACTIONS.CLEAR_QUERY_HISTORY\n    });\n  };\n  // Send the gremlin query to the server\n  const sendQuery = e => {\n    e.preventDefault();\n    props.dispatch({\n      type: ACTIONS.ADD_QUERY_HISTORY\n    });\n    props.dispatch({\n      type: ACTIONS.CLEAR_GRAPH\n    });\n    props.dispatch({\n      type: ACTIONS.SET_ERROR,\n      payload: null\n    });\n    axios.post(QUERY_ENDPOINT, {\n      host: props.host,\n      port: props.port,\n      query: props.query,\n      nodeLimit: props.nodeLimit\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      onFetchQuery(response, props.query, props.nodeLabels, props.dispatch);\n    }).catch(error => {\n      props.dispatch({\n        type: ACTIONS.SET_ERROR,\n        payload: COMMON_GREMLIN_ERROR\n      });\n    });\n  };\n  const onHostChanged = host => {\n    props.dispatch({\n      type: ACTIONS.SET_HOST,\n      payload: host\n    });\n  };\n  const onPortChanged = port => {\n    props.dispatch({\n      type: ACTIONS.SET_PORT,\n      payload: port\n    });\n  };\n  const onQueryChanged = query => {\n    props.dispatch({\n      type: ACTIONS.SET_QUERY,\n      payload: query\n    });\n  };\n  // NEW\n  // const onHostChanged = e => {\n  //   setHost(e.target.value);\n  //   // dispatcher(hostSelector)\n  //   props.dispatch({ type: ACTIONS.SET_HOST, payload: host });\n  // }\n\n  // const onPortChanged = e => {\n  //   setPort(e.target.value);\n  //   props.dispatch({ type: ACTIONS.SET_PORT, payload: port });\n  // }\n\n  // const onQueryChanged = e => {\n  //   setQuery(e.target.value);\n  //   props.dispatch({ type: ACTIONS.SET_QUERY, payload: query });\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'header',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    value: props.host,\n    onChange: event => onHostChanged(event.target.value),\n    id: \"standard-basic\",\n    label: \"host\",\n    style: {\n      width: '10%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    value: props.port,\n    onChange: event => onPortChanged(event.target.value),\n    id: \"standard-basic\",\n    label: \"port\",\n    style: {\n      width: '10%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    value: props.query,\n    onChange: event => onQueryChanged(event.target.value),\n    id: \"standard-basic\",\n    label: \"gremlin query example: g.V()\",\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: sendQuery,\n    style: {\n      width: '150px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \" Execute Query\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveQuery,\n    style: {\n      width: '150px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \" Save Query\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, props.error));\n}\nexport const HeaderComponent = connect(state => {\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    query: state.gremlin.query,\n    error: state.gremlin.error,\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit\n  };\n})(Header);","map":{"version":3,"names":["React","useState","connect","useDispatch","useSelector","Button","TextField","axios","ACTIONS","QUERY_ENDPOINT","COMMON_GREMLIN_ERROR","onFetchQuery","query","Header","props","saveQuery","dispatch","type","ADD_QUERY_HISTORY","payload","clearGraph","CLEAR_GRAPH","clearQueryHistory","CLEAR_QUERY_HISTORY","sendQuery","e","preventDefault","SET_ERROR","post","host","port","nodeLimit","headers","then","response","nodeLabels","catch","error","onHostChanged","SET_HOST","onPortChanged","SET_PORT","onQueryChanged","SET_QUERY","event","target","value","width","color","HeaderComponent","state","gremlin","nodes","graph","edges","options"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComponent.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { connect, useDispatch, useSelector} from 'react-redux';\nimport { Button, TextField }  from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\nimport { query } from 'express';\n\nfunction Header(props) {\n  // const hostSelector = useSelector((state) => state.gremlin.host)\n  // const dispatcher = useDispatch()\n\n  // const [port, setPort] = useState(8182)\n  // const [host, setHost] = useState('localhost')\n  // const [query, setQuery] = useState('g.V()')\n\n  const saveQuery = () =>{\n    props.dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query})\n  }\n\n\n  const clearGraph = () => {\n    props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    // props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  }\n\n  const clearQueryHistory = () => {\n    props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  }\n  // Send the gremlin query to the server\n  const sendQuery = (e) => {\n    e.preventDefault()\n    props.dispatch({ type: ACTIONS.ADD_QUERY_HISTORY });\n    props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    props.dispatch({ type: ACTIONS.SET_ERROR, payload: null });\n    axios.post(\n      QUERY_ENDPOINT,\n      { host: props.host, port: props.port, query: props.query, nodeLimit: props.nodeLimit },\n      { headers: { 'Content-Type': 'application/json' } }\n    ).then((response) => {\n      onFetchQuery(response, props.query, props.nodeLabels, props.dispatch);\n    }).catch((error) => {\n      props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n    });\n  }\n\n  const onHostChanged = (host) => {\n    props.dispatch({ type: ACTIONS.SET_HOST, payload: host });\n  }\n\n  const onPortChanged = (port) => {\n    props.dispatch({ type: ACTIONS.SET_PORT, payload: port });\n  }\n\n  const onQueryChanged = (query) => {\n    props.dispatch({ type: ACTIONS.SET_QUERY, payload: query });\n  }\n  // NEW\n  // const onHostChanged = e => {\n  //   setHost(e.target.value);\n  //   // dispatcher(hostSelector)\n  //   props.dispatch({ type: ACTIONS.SET_HOST, payload: host });\n  // }\n\n  // const onPortChanged = e => {\n  //   setPort(e.target.value);\n  //   props.dispatch({ type: ACTIONS.SET_PORT, payload: port });\n  // }\n\n  // const onQueryChanged = e => {\n  //   setQuery(e.target.value);\n  //   props.dispatch({ type: ACTIONS.SET_QUERY, payload: query });\n  // }\n\n    return (\n      <div className={'header'}>\n        <form noValidate autoComplete=\"off\">\n          <TextField value={props.host} onChange={(event => onHostChanged(event.target.value))} id=\"standard-basic\" label=\"host\" style={{width: '10%'}} />\n          <TextField value={props.port} onChange={(event => onPortChanged(event.target.value))} id=\"standard-basic\" label=\"port\" style={{width: '10%'}} />\n          <TextField value={props.query} onChange={(event => onQueryChanged(event.target.value))} id=\"standard-basic\" label=\"gremlin query example: g.V()\" style={{width: '50%'}} />\n          <Button variant=\"contained\" color=\"primary\" onClick={sendQuery} style={{width: '150px'}}> Execute Query</Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={saveQuery} style={{width: '150px'}}> Save Query</Button>\n        </form>\n\n        <br />\n        <div style={{color: 'red'}}>{props.error}</div>\n      </div>\n\n    );\n  \n}\n\nexport const HeaderComponent = connect((state)=>{\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    query: state.gremlin.query,\n    error: state.gremlin.error,\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit\n  };\n})(Header);"],"mappings":"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"},"metadata":{},"sourceType":"module"}