{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComp.js\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"../../Context\";\n// import { connect } from 'react-redux';\nimport { Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nexport const HeaderComp = _ref => {\n  let {\n    port,\n    host,\n    query,\n    changeHost,\n    changePort,\n    changeQuery\n  } = _ref;\n  const nodeCounts = useSelector(state => state.graph.nodes);\n  const dispatch = useDispatch();\n\n  // const nodes = useSelector(state => state.nodes)\n  // const { nodes, setNodes } = useContext(Context);\n\n  // const clickHandler = () => {\n  //     setNodes((nodes) => nodes + 1);\n  // };\n\n  const sendQuery = () => {\n    dispatch(ACTIONS.SET_ERROR.reducer(null));\n    // this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    axios.post(QUERY_ENDPOINT, {\n      host: host,\n      port: port,\n      query: query,\n      nodeLimit: 4\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // console.log(response)\n      const gremlinResponse = onFetchQuery(response, query, []);\n    }).catch(error => {\n      //   this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n      // TODO: Handle the error condition maybe some warning    \n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    value: host,\n    onChange: changeHost,\n    label: \"host\",\n    style: {\n      width: '10%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    value: port,\n    onChange: changePort,\n    label: \"port\",\n    style: {\n      width: '10%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    value: query,\n    onChange: changeQuery,\n    label: \"gremlin query example: g.V()\",\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    style: {\n      width: '150px'\n    },\n    onClick: sendQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \" Execute Query\")));\n};\nexport default HeaderComp;","map":{"version":3,"names":["React","useContext","Context","Button","TextField","axios","ACTIONS","QUERY_ENDPOINT","COMMON_GREMLIN_ERROR","onFetchQuery","useState","useDispatch","useSelector","HeaderComp","port","host","query","changeHost","changePort","changeQuery","nodeCounts","state","graph","nodes","dispatch","sendQuery","SET_ERROR","reducer","post","nodeLimit","headers","then","response","gremlinResponse","catch","error","console","log","width"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComp.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { Context } from \"../../Context\";\n// import { connect } from 'react-redux';\nimport { Button, TextField }  from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\nimport  {useState} from 'react'\nimport { useDispatch, useSelector  } from \"react-redux\";\n\nexport const HeaderComp = ({port, host, query, changeHost, changePort, changeQuery}) => {\n    const nodeCounts = useSelector(state => state.graph.nodes);\n    const dispatch = useDispatch();\n    \n    // const nodes = useSelector(state => state.nodes)\n    // const { nodes, setNodes } = useContext(Context);\n    \n    // const clickHandler = () => {\n    //     setNodes((nodes) => nodes + 1);\n    // };\n\n    const sendQuery = () => {\n        dispatch(ACTIONS.SET_ERROR.reducer(null))\n        // this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n        axios.post(\n          QUERY_ENDPOINT,\n          { host: host, port: port, query: query, nodeLimit: 4 },\n          { headers: { 'Content-Type': 'application/json' } }\n        ).then((response) => {\n            // console.log(response)\n            const gremlinResponse = onFetchQuery(response, query, [])\n        }).catch((error) => {\n        //   this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n        // TODO: Handle the error condition maybe some warning    \n        console.log(error)\n        });\n      }\n      \n\n    return (\n        <header>\n          <form>\n            <TextField value={host} onChange={changeHost} label=\"host\" style={{width: '10%'}} />\n            <TextField value={port} onChange= {changePort}  label=\"port\" style={{width: '10%'}} />\n            <TextField value={query} onChange={changeQuery} label=\"gremlin query example: g.V()\" style={{width: '50%'}} />\n            <Button variant=\"contained\" color=\"primary\" style={{width: '150px'}} onClick={sendQuery} > Execute Query</Button>\n          </form>\n    </header>\n      )\n    }\nexport default HeaderComp"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,OAAO,QAAQ,eAAe;AACvC;AACA,SAASC,MAAM,EAAEC,SAAS,QAAS,mBAAmB;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,cAAc,EAAEC,oBAAoB,QAAQ,iBAAiB;AAC/E,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,QAAQ,QAAO,OAAO;AAC/B,SAASC,WAAW,EAAEC,WAAW,QAAS,aAAa;AAEvD,OAAO,MAAMC,UAAU,GAAG,QAA8D;EAAA,IAA7D;IAACC,IAAI;IAAEC,IAAI;IAAEC,KAAK;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAW,CAAC;EAC/E,MAAMC,UAAU,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,KAAK,CAAC;EAC1D,MAAMC,QAAQ,GAAGb,WAAW,EAAE;;EAE9B;EACA;;EAEA;EACA;EACA;;EAEA,MAAMc,SAAS,GAAG,MAAM;IACpBD,QAAQ,CAAClB,OAAO,CAACoB,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzC;IACAtB,KAAK,CAACuB,IAAI,CACRrB,cAAc,EACd;MAAEQ,IAAI,EAAEA,IAAI;MAAED,IAAI,EAAEA,IAAI;MAAEE,KAAK,EAAEA,KAAK;MAAEa,SAAS,EAAE;IAAE,CAAC,EACtD;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC,CACpD,CAACC,IAAI,CAAEC,QAAQ,IAAK;MACjB;MACA,MAAMC,eAAe,GAAGxB,YAAY,CAACuB,QAAQ,EAAEhB,KAAK,EAAE,EAAE,CAAC;IAC7D,CAAC,CAAC,CAACkB,KAAK,CAAEC,KAAK,IAAK;MACpB;MACA;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC;EAGH,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,SAAS;IAAC,KAAK,EAAEpB,IAAK;IAAC,QAAQ,EAAEE,UAAW;IAAC,KAAK,EAAC,MAAM;IAAC,KAAK,EAAE;MAACqB,KAAK,EAAE;IAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eACpF,oBAAC,SAAS;IAAC,KAAK,EAAExB,IAAK;IAAC,QAAQ,EAAGI,UAAW;IAAE,KAAK,EAAC,MAAM;IAAC,KAAK,EAAE;MAACoB,KAAK,EAAE;IAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eACtF,oBAAC,SAAS;IAAC,KAAK,EAAEtB,KAAM;IAAC,QAAQ,EAAEG,WAAY;IAAC,KAAK,EAAC,8BAA8B;IAAC,KAAK,EAAE;MAACmB,KAAK,EAAE;IAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eAC9G,oBAAC,MAAM;IAAC,OAAO,EAAC,WAAW;IAAC,KAAK,EAAC,SAAS;IAAC,KAAK,EAAE;MAACA,KAAK,EAAE;IAAO,CAAE;IAAC,OAAO,EAAEb,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAE,gBAAc,CAAS,CAC5G,CACJ;AAET,CAAC;AACL,eAAeZ,UAAU"},"metadata":{},"sourceType":"module"}