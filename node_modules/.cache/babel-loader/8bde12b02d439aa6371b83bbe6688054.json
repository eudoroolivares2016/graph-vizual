{"ast":null,"code":"import { extractEdgesAndNodes } from './utils';\nimport { ACTIONS } from '../constants';\n// old\n\n// TOOD: remove we no longer need to pass the query\n// TOOD The query is returning only a single value for properties with multiple notes in them\nexport const parseGremlinResponse = (result, query, oldNodeLabels, dispatch) => {\n  const {\n    nodes,\n    edges,\n    nodeLabels\n  } = extractEdgesAndNodes(result.data, oldNodeLabels);\n  console.warn('The full result of the query', result);\n\n  // We do have mutlti properties here then\n  console.warn('on the other side of techQuery after nodes have been extracted', nodes);\n  dispatch({\n    type: ACTIONS.ADD_NODES,\n    payload: nodes\n  });\n  dispatch({\n    type: ACTIONS.ADD_EDGES,\n    payload: edges\n  });\n  dispatch({\n    type: ACTIONS.SET_NODE_LABELS,\n    payload: nodeLabels\n  });\n  // console.log(nodeLabels);\n  // console.warn(nodes);\n\n  dispatch({\n    type: ACTIONS.ADD_QUERY_HISTORY,\n    payload: query\n  });\n};","map":{"version":3,"names":["extractEdgesAndNodes","ACTIONS","parseGremlinResponse","result","query","oldNodeLabels","dispatch","nodes","edges","nodeLabels","data","console","warn","type","ADD_NODES","payload","ADD_EDGES","SET_NODE_LABELS","ADD_QUERY_HISTORY"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/logics/parseGremlinResponse.js"],"sourcesContent":["import { extractEdgesAndNodes } from './utils';\nimport { ACTIONS } from '../constants';\n// old\n\n// TOOD: remove we no longer need to pass the query\n// TOOD The query is returning only a single value for properties with multiple notes in them\nexport const parseGremlinResponse = (result, query, oldNodeLabels, dispatch) => {\n  const { nodes, edges, nodeLabels } = extractEdgesAndNodes(result.data, oldNodeLabels)\n  console.warn('The full result of the query', result)\n\n  // We do have mutlti properties here then\n  console.warn('on the other side of techQuery after nodes have been extracted', nodes)\n  dispatch({ type: ACTIONS.ADD_NODES, payload: nodes })\n  dispatch({ type: ACTIONS.ADD_EDGES, payload: edges })\n  dispatch({ type: ACTIONS.SET_NODE_LABELS, payload: nodeLabels })\n  // console.log(nodeLabels);\n  // console.warn(nodes);\n\n  dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query })\n}"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,OAAO,QAAQ,cAAc;AACtC;;AAEA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAEC,QAAQ,KAAK;EAC9E,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGT,oBAAoB,CAACG,MAAM,CAACO,IAAI,EAAEL,aAAa,CAAC;EACrFM,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAET,MAAM,CAAC;;EAEpD;EACAQ,OAAO,CAACC,IAAI,CAAC,gEAAgE,EAAEL,KAAK,CAAC;EACrFD,QAAQ,CAAC;IAAEO,IAAI,EAAEZ,OAAO,CAACa,SAAS;IAAEC,OAAO,EAAER;EAAM,CAAC,CAAC;EACrDD,QAAQ,CAAC;IAAEO,IAAI,EAAEZ,OAAO,CAACe,SAAS;IAAED,OAAO,EAAEP;EAAM,CAAC,CAAC;EACrDF,QAAQ,CAAC;IAAEO,IAAI,EAAEZ,OAAO,CAACgB,eAAe;IAAEF,OAAO,EAAEN;EAAW,CAAC,CAAC;EAChE;EACA;;EAEAH,QAAQ,CAAC;IAAEO,IAAI,EAAEZ,OAAO,CAACiB,iBAAiB;IAAEH,OAAO,EAAEX;EAAM,CAAC,CAAC;AAC/D,CAAC"},"metadata":{},"sourceType":"module"}