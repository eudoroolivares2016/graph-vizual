{"ast":null,"code":"import _, { forEach } from 'lodash';\nconst getRandomLabel = obj => {\n  return Object.keys(obj)[0];\n};\n// Retrieve new nodes\nexport const getDiffNodes = (newList, oldList) => {\n  const diffNodes = _.difference(newList, oldList);\n  return diffNodes;\n};\n\n// Retrieve new Edges based on the unique properties in from and to\nexport const getDiffEdges = (newList, oldList) => {\n  const diffEdge = _.difference(newList, oldList);\n  console.warn('diff edges', diffEdge);\n  return diffEdge;\n};\nexport const extractEdgesAndNodes = function (nodeList) {\n  let nodeLabels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  const nodes = [];\n  const nodeLabelMap = _.mapValues(_.keyBy(nodeLabels, 'type'), 'field');\n  // foreach node in node list apply\n  _.forEach(nodeList, node => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = getRandomLabel(node.properties);\n      const nodeLabel = {\n        type,\n        field\n      };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    // console.warn('full properties' , node.properties)\n    // Nodes to update the current state of the graph\n    nodes.push({\n      id: node.id,\n      label: String(label),\n      group: node.label,\n      properties: node.properties,\n      type\n    });\n    // draw edges that connect to the nodes\n    // TODO: Are those edge configuration needed or can I get rid of those\n    edges = edges.concat(_.map(node.edges, edge => ({\n      ...edge,\n      type: edge.label,\n      arrows: {\n        to: {\n          enabled: true,\n          scaleFactor: 0.5\n        }\n      }\n    })));\n  });\n  // console.warn('nodes before extraction' ,nodes);\n  console.log('nodes as they should be returning from extractor fucntion', nodes);\n  return {\n    edges,\n    nodes,\n    nodeLabels\n  };\n};\n// _.find(collection, predicate, fromIndex)\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id, 0);\n};\n// TODO: This is the function cutting off some of the properties\n// iterate over the list \n// export const stringifyObjectValues = (obj) => {\n//   // _.forOwn(obj, (value, key) => {\n//   //   if (!_.isString(value)) {\n//   //     obj[key] = JSON.stringify(value);\n//   //   }\n//   // });\n//   JSON.stringify(obj)\n\n// };","map":{"version":3,"names":["_","forEach","getRandomLabel","obj","Object","keys","getDiffNodes","newList","oldList","diffNodes","difference","getDiffEdges","diffEdge","console","warn","extractEdgesAndNodes","nodeList","nodeLabels","edges","nodes","nodeLabelMap","mapValues","keyBy","node","type","label","field","properties","nodeLabel","push","labelField","id","String","group","concat","map","edge","arrows","to","enabled","scaleFactor","log","findNodeById","find"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/logics/utils.js"],"sourcesContent":["import _, { forEach } from 'lodash';\n\nconst getRandomLabel = (obj) => {\n  return Object.keys(obj)[0]\n\n}\n// Retrieve new nodes\nexport const getDiffNodes = (newList, oldList) => {\n  const diffNodes = _.difference(newList, oldList)\n  return diffNodes\n}\n\n// Retrieve new Edges based on the unique properties in from and to\nexport const getDiffEdges = (newList, oldList) => {\n  const diffEdge = _.difference(newList, oldList)\n  console.warn('diff edges' , diffEdge)\n  return diffEdge\n}\n\nexport const extractEdgesAndNodes = (nodeList, nodeLabels=[]) => {\n  let edges = []\n  const nodes = []\n\n  const nodeLabelMap =_.mapValues( _.keyBy(nodeLabels, 'type'), 'field')\n  // foreach node in node list apply\n  _.forEach(nodeList, (node) => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = getRandomLabel(node.properties)\n      const nodeLabel = { type, field }\n      nodeLabels.push(nodeLabel)\n      nodeLabelMap[type] = field\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    // console.warn('full properties' , node.properties)\n    // Nodes to update the current state of the graph\n    nodes.push({ id: node.id, label: String(label), group: node.label, properties: node.properties, type })\n    // draw edges that connect to the nodes\n    // TODO: Are those edge configuration needed or can I get rid of those\n    edges = edges.concat(_.map(node.edges, edge => ({ ...edge, type: edge.label, arrows: { to: { enabled: true, scaleFactor: 0.5} } })))\n  })\n  // console.warn('nodes before extraction' ,nodes);\n  console.log('nodes as they should be returning from extractor fucntion', nodes)\n  return { edges, nodes, nodeLabels }\n}\n// _.find(collection, predicate, fromIndex)\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id, 0)\n}\n// TODO: This is the function cutting off some of the properties\n// iterate over the list \n// export const stringifyObjectValues = (obj) => {\n//   // _.forOwn(obj, (value, key) => {\n//   //   if (!_.isString(value)) {\n//   //     obj[key] = JSON.stringify(value);\n//   //   }\n//   // });\n//   JSON.stringify(obj)\n\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}