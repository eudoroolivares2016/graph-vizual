{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComponent.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\nclass Header extends React.Component {\n  clearGraph() {\n    this.props.dispatch({\n      type: ACTIONS.CLEAR_GRAPH\n    });\n    this.props.dispatch({\n      type: ACTIONS.CLEAR_QUERY_HISTORY\n    });\n  }\n  clearQueryHistory() {\n    this.props.dispatch({\n      type: ACTIONS.CLEAR_QUERY_HISTORY\n    });\n  }\n  // Send the gremlin query to the server\n  sendQuery() {\n    const nodeCounts = useSelector(state => state.graph.nodes);\n    const dispatch = useDispatch();\n    // this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    this.props.dispatch({\n      type: ACTIONS.SET_ERROR,\n      payload: null\n    });\n    axios.post(QUERY_ENDPOINT, {\n      host: this.props.host,\n      port: this.props.port,\n      query: this.props.query,\n      nodeLimit: this.props.nodeLimit\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      onFetchQuery(response, this.props.query, this.props.nodeLabels, dispatch);\n    }).catch(error => {\n      this.props.dispatch({\n        type: ACTIONS.SET_ERROR,\n        payload: COMMON_GREMLIN_ERROR\n      });\n    });\n  }\n  onHostChanged(host) {\n    this.props.dispatch({\n      type: ACTIONS.SET_HOST,\n      payload: host\n    });\n  }\n  onPortChanged(port) {\n    this.props.dispatch({\n      type: ACTIONS.SET_PORT,\n      payload: port\n    });\n  }\n  onQueryChanged(query) {\n    this.props.dispatch({\n      type: ACTIONS.SET_QUERY,\n      payload: query\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'header',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      value: this.props.host,\n      onChange: event => this.onHostChanged(event.target.value),\n      id: \"standard-basic\",\n      label: \"host\",\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      value: this.props.port,\n      onChange: event => this.onPortChanged(event.target.value),\n      id: \"standard-basic\",\n      label: \"port\",\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      value: this.props.query,\n      onChange: event => this.onQueryChanged(event.target.value),\n      id: \"standard-basic\",\n      label: \"gremlin query example: g.V()\",\n      style: {\n        width: '50%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.sendQuery.bind(this),\n      style: {\n        width: '150px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \" Execute Query\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, this.props.error));\n  }\n}\nexport const HeaderComponent = connect(state => {\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    query: state.gremlin.query,\n    error: state.gremlin.error,\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit\n  };\n})(Header);","map":{"version":3,"names":["React","connect","Button","TextField","axios","ACTIONS","QUERY_ENDPOINT","COMMON_GREMLIN_ERROR","onFetchQuery","Header","Component","clearGraph","props","dispatch","type","CLEAR_GRAPH","CLEAR_QUERY_HISTORY","clearQueryHistory","sendQuery","nodeCounts","useSelector","state","graph","nodes","useDispatch","SET_ERROR","payload","post","host","port","query","nodeLimit","headers","then","response","nodeLabels","catch","error","onHostChanged","SET_HOST","onPortChanged","SET_PORT","onQueryChanged","SET_QUERY","render","event","target","value","width","bind","color","HeaderComponent","gremlin","edges","options"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/Header/HeaderComponent.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, TextField }  from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\n\nclass Header extends React.Component {\n  clearGraph() {\n    this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    this.props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  }\n\n  clearQueryHistory() {\n    this.props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  }\n  // Send the gremlin query to the server\n  sendQuery() {\n    const nodeCounts = useSelector(state => state.graph.nodes);\n    const dispatch = useDispatch();\n    // this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: null });\n\n\n    axios.post(\n      QUERY_ENDPOINT,\n      { host: this.props.host, port: this.props.port, query: this.props.query, nodeLimit: this.props.nodeLimit },\n      { headers: { 'Content-Type': 'application/json' } }\n    ).then((response) => {\n      onFetchQuery(response, this.props.query, this.props.nodeLabels, dispatch);\n    }).catch((error) => {\n      this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n    });\n  }\n\n  onHostChanged(host) {\n    this.props.dispatch({ type: ACTIONS.SET_HOST, payload: host });\n  }\n\n  onPortChanged(port) {\n    this.props.dispatch({ type: ACTIONS.SET_PORT, payload: port });\n  }\n\n  onQueryChanged(query) {\n    this.props.dispatch({ type: ACTIONS.SET_QUERY, payload: query });\n  }\n\n  render(){\n    return (\n      <div className={'header'}>\n        <form noValidate autoComplete=\"off\">\n          <TextField value={this.props.host} onChange={(event => this.onHostChanged(event.target.value))} id=\"standard-basic\" label=\"host\" style={{width: '10%'}} />\n          <TextField value={this.props.port} onChange={(event => this.onPortChanged(event.target.value))} id=\"standard-basic\" label=\"port\" style={{width: '10%'}} />\n          <TextField value={this.props.query} onChange={(event => this.onQueryChanged(event.target.value))} id=\"standard-basic\" label=\"gremlin query example: g.V()\" style={{width: '50%'}} />\n          <Button variant=\"contained\" color=\"primary\" onClick={this.sendQuery.bind(this)} style={{width: '150px'}}> Execute Query</Button>\n        </form>\n\n        <br />\n        <div style={{color: 'red'}}>{this.props.error}</div>\n      </div>\n\n    );\n  }\n}\n\nexport const HeaderComponent = connect((state)=>{\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    query: state.gremlin.query,\n    error: state.gremlin.error,\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit\n  };\n})(Header);"],"mappings":"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"},"metadata":{},"sourceType":"module"}