{"ast":null,"code":"import _ from 'lodash';\nconst selectRandomField = obj => {\n  let firstKey;\n  // For each key in the object set the label to something\n  for (firstKey in obj) break;\n  return firstKey;\n};\n\n// export const getDiffNodes = (newList, oldList) => {\n//   return _.differenceBy(newList, oldList, (node) => node.id);\n// };\n\nexport const getDiffEdges = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, edge => `${edge.from},${edge.to}`);\n};\nexport const extractEdgesAndNodes = function (nodeList) {\n  let nodeLabels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  const nodes = [];\n  const nodeLabelMap = _.mapValues(_.keyBy(nodeLabels, 'type'), 'field');\n  _.forEach(nodeList, node => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = selectRandomField(node.properties);\n      const nodeLabel = {\n        type,\n        field\n      };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    nodes.push({\n      id: node.id,\n      label: String(label),\n      group: node.label,\n      properties: node.properties,\n      type\n    });\n    edges = edges.concat(_.map(node.edges, edge => ({\n      ...edge,\n      type: edge.label,\n      arrows: {\n        to: {\n          enabled: true,\n          scaleFactor: 0.5\n        }\n      }\n    })));\n  });\n  return {\n    edges,\n    nodes,\n    nodeLabels\n  };\n};\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id);\n};\nexport const stringifyObjectValues = obj => {\n  _.forOwn(obj, (value, key) => {\n    if (!_.isString(value)) {\n      obj[key] = JSON.stringify(value);\n    }\n  });\n};","map":{"version":3,"names":["_","selectRandomField","obj","firstKey","getDiffEdges","newList","oldList","differenceBy","edge","from","to","extractEdgesAndNodes","nodeList","nodeLabels","edges","nodes","nodeLabelMap","mapValues","keyBy","forEach","node","type","label","field","properties","nodeLabel","push","labelField","id","String","group","concat","map","arrows","enabled","scaleFactor","findNodeById","find","stringifyObjectValues","forOwn","value","key","isString","JSON","stringify"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/logics/utils.js"],"sourcesContent":["import _ from 'lodash';\n\nconst selectRandomField = (obj) => {\n  let firstKey;\n  // For each key in the object set the label to something\n  for (firstKey in obj) break;\n  return firstKey;\n};\n\n// export const getDiffNodes = (newList, oldList) => {\n//   return _.differenceBy(newList, oldList, (node) => node.id);\n// };\n\nexport const getDiffEdges = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, (edge) => `${edge.from},${edge.to}`);\n};\n\nexport const extractEdgesAndNodes = (nodeList, nodeLabels=[]) => {\n  let edges = [];\n  const nodes = [];\n\n  const nodeLabelMap =_.mapValues( _.keyBy(nodeLabels, 'type'), 'field');\n\n  _.forEach(nodeList, (node) => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = selectRandomField(node.properties);\n      const nodeLabel = { type, field };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    nodes.push({ id: node.id, label: String(label), group: node.label, properties: node.properties, type });\n\n    edges = edges.concat(_.map(node.edges, edge => ({ ...edge, type: edge.label, arrows: { to: { enabled: true, scaleFactor: 0.5 } } })));\n  });\n\n  return { edges, nodes, nodeLabels }\n};\n\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id);\n};\n\nexport const stringifyObjectValues = (obj) => {\n  _.forOwn(obj, (value, key) => {\n    if (!_.isString(value)) {\n      obj[key] = JSON.stringify(value);\n    }\n  });\n};\n"],"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AAEtB,MAAMC,iBAAiB,GAAIC,GAAG,IAAK;EACjC,IAAIC,QAAQ;EACZ;EACA,KAAKA,QAAQ,IAAID,GAAG,EAAE;EACtB,OAAOC,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAO,EAAEC,OAAO,KAAK;EAChD,OAAON,CAAC,CAACO,YAAY,CAACF,OAAO,EAAEC,OAAO,EAAGE,IAAI,IAAM,GAAEA,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,EAAG,EAAC,CAAC;AAC9E,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,UAACC,QAAQ,EAAoB;EAAA,IAAlBC,UAAU,uEAAC,EAAE;EAC1D,IAAIC,KAAK,GAAG,EAAE;EACd,MAAMC,KAAK,GAAG,EAAE;EAEhB,MAAMC,YAAY,GAAEhB,CAAC,CAACiB,SAAS,CAAEjB,CAAC,CAACkB,KAAK,CAACL,UAAU,EAAE,MAAM,CAAC,EAAE,OAAO,CAAC;EAEtEb,CAAC,CAACmB,OAAO,CAACP,QAAQ,EAAGQ,IAAI,IAAK;IAC5B,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK;IACvB;IACA,IAAI,CAACN,YAAY,CAACK,IAAI,CAAC,EAAE;MACvB,MAAME,KAAK,GAAGtB,iBAAiB,CAACmB,IAAI,CAACI,UAAU,CAAC;MAChD,MAAMC,SAAS,GAAG;QAAEJ,IAAI;QAAEE;MAAM,CAAC;MACjCV,UAAU,CAACa,IAAI,CAACD,SAAS,CAAC;MAC1BT,YAAY,CAACK,IAAI,CAAC,GAAGE,KAAK;IAC5B;IACA,MAAMI,UAAU,GAAGX,YAAY,CAACK,IAAI,CAAC;IACrC,MAAMC,KAAK,GAAGK,UAAU,IAAIP,IAAI,CAACI,UAAU,GAAGJ,IAAI,CAACI,UAAU,CAACG,UAAU,CAAC,GAAGN,IAAI;IAChFN,KAAK,CAACW,IAAI,CAAC;MAAEE,EAAE,EAAER,IAAI,CAACQ,EAAE;MAAEN,KAAK,EAAEO,MAAM,CAACP,KAAK,CAAC;MAAEQ,KAAK,EAAEV,IAAI,CAACE,KAAK;MAAEE,UAAU,EAAEJ,IAAI,CAACI,UAAU;MAAEH;IAAK,CAAC,CAAC;IAEvGP,KAAK,GAAGA,KAAK,CAACiB,MAAM,CAAC/B,CAAC,CAACgC,GAAG,CAACZ,IAAI,CAACN,KAAK,EAAEN,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEa,IAAI,EAAEb,IAAI,CAACc,KAAK;MAAEW,MAAM,EAAE;QAAEvB,EAAE,EAAE;UAAEwB,OAAO,EAAE,IAAI;UAAEC,WAAW,EAAE;QAAI;MAAE;IAAE,CAAC,CAAC,CAAC,CAAC;EACvI,CAAC,CAAC;EAEF,OAAO;IAAErB,KAAK;IAAEC,KAAK;IAAEF;EAAW,CAAC;AACrC,CAAC;AAED,OAAO,MAAMuB,YAAY,GAAG,CAACxB,QAAQ,EAAEgB,EAAE,KAAK;EAC5C,OAAO5B,CAAC,CAACqC,IAAI,CAACzB,QAAQ,EAAEQ,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKA,EAAE,CAAC;AACjD,CAAC;AAED,OAAO,MAAMU,qBAAqB,GAAIpC,GAAG,IAAK;EAC5CF,CAAC,CAACuC,MAAM,CAACrC,GAAG,EAAE,CAACsC,KAAK,EAAEC,GAAG,KAAK;IAC5B,IAAI,CAACzC,CAAC,CAAC0C,QAAQ,CAACF,KAAK,CAAC,EAAE;MACtBtC,GAAG,CAACuC,GAAG,CAAC,GAAGE,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC;IAClC;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}