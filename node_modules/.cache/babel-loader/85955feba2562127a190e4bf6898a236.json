{"ast":null,"code":"import _, { forEach } from 'lodash';\nconst selectRandomField = obj => {\n  let firstKey;\n  // For each key in the object set the label to something\n  for (firstKey in obj) break;\n  return firstKey;\n};\nexport const getDiffNodes = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, node => node.id);\n};\nexport const getDiffEdges = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, edge => `${edge.from},${edge.to}`);\n};\nexport const extractEdgesAndNodes = function (nodeList) {\n  let nodeLabels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  const nodes = [];\n  const nodeLabelMap = _.mapValues(_.keyBy(nodeLabels, 'type'), 'field');\n  _.forEach(nodeList, node => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = selectRandomField(node.properties);\n      const nodeLabel = {\n        type,\n        field\n      };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    // console.warn('full properties' , node.properties)\n    // Nodes to update the current state of the graph\n    nodes.push({\n      id: node.id,\n      label: String(label),\n      group: node.label,\n      properties: node.properties,\n      type\n    });\n    // Edges passed back as the next state for the graph\n    edges = edges.concat(_.map(node.edges, edge => ({\n      ...edge,\n      type: edge.label,\n      arrows: {\n        to: {\n          enabled: true,\n          scaleFactor: 0.5\n        }\n      }\n    })));\n  });\n  // console.warn('nodes before extraction' ,nodes);\n  console.log('nodes as they should be returning from extractor fucntion', nodes);\n  return {\n    edges,\n    nodes,\n    nodeLabels\n  };\n};\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id);\n};\n// TODO: This is the function cutting off some of the properties\nexport const stringifyObjectValues = obj => {\n  // _.forOwn(obj, (value, key) => {\n  //   if (!_.isString(value)) {\n  //     obj[key] = JSON.stringify(value);\n  //   }\n  // });\n  _.forEach(collection, [iteratee = _.identity]);\n};","map":{"version":3,"names":["_","forEach","selectRandomField","obj","firstKey","getDiffNodes","newList","oldList","differenceBy","node","id","getDiffEdges","edge","from","to","extractEdgesAndNodes","nodeList","nodeLabels","edges","nodes","nodeLabelMap","mapValues","keyBy","type","label","field","properties","nodeLabel","push","labelField","String","group","concat","map","arrows","enabled","scaleFactor","console","log","findNodeById","find","stringifyObjectValues","collection","iteratee","identity"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/logics/utils.js"],"sourcesContent":["import _, { forEach } from 'lodash';\n\nconst selectRandomField = (obj) => {\n  let firstKey;\n  // For each key in the object set the label to something\n  for (firstKey in obj) break;\n  return firstKey;\n};\n\nexport const getDiffNodes = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, (node) => node.id);\n};\n\nexport const getDiffEdges = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, (edge) => `${edge.from},${edge.to}`);\n};\n\nexport const extractEdgesAndNodes = (nodeList, nodeLabels=[]) => {\n  let edges = [];\n  const nodes = [];\n\n  const nodeLabelMap =_.mapValues( _.keyBy(nodeLabels, 'type'), 'field');\n\n  _.forEach(nodeList, (node) => {\n    const type = node.label;\n    // If the object is not in the nodeLabel map, then we assign a random field (the first) as the label\n    if (!nodeLabelMap[type]) {\n      const field = selectRandomField(node.properties);\n      const nodeLabel = { type, field };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    // console.warn('full properties' , node.properties)\n    // Nodes to update the current state of the graph\n    nodes.push({ id: node.id, label: String(label), group: node.label, properties: node.properties, type });\n    // Edges passed back as the next state for the graph\n    edges = edges.concat(_.map(node.edges, edge => ({ ...edge, type: edge.label, arrows: { to: { enabled: true, scaleFactor: 0.5 } } })));\n  });\n  // console.warn('nodes before extraction' ,nodes);\n  console.log('nodes as they should be returning from extractor fucntion', nodes)\n  return { edges, nodes, nodeLabels }\n};\n\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id);\n};\n// TODO: This is the function cutting off some of the properties\nexport const stringifyObjectValues = (obj) => {\n  // _.forOwn(obj, (value, key) => {\n  //   if (!_.isString(value)) {\n  //     obj[key] = JSON.stringify(value);\n  //   }\n  // });\n  _.forEach( collection, [iteratee = _.identity] )\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}