{"ast":null,"code":"import vis from 'vis-network';\nimport _ from 'lodash';\nimport { ACTIONS } from '../constants';\nimport { getDiffNodes, getDiffEdges, findNodeById } from '../logics/utils';\n\n// Initialize an Empty graph\nconst initialState = {\n  network: null,\n  nodeHolder: new vis.DataSet([]),\n  edgeHolder: new vis.DataSet([]),\n  nodes: [],\n  edges: [],\n  selectedNode: {},\n  selectedEdge: {}\n};\n// reducer: previous state, action returning the new state\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ACTIONS.CLEAR_GRAPH:\n      {\n        state.nodeHolder.clear();\n        state.edgeHolder.clear();\n        return {\n          ...state,\n          nodes: [],\n          edges: [],\n          selectedNode: {},\n          selectedEdge: {}\n        };\n      }\n    case ACTIONS.SET_NETWORK:\n      {\n        return {\n          ...state,\n          network: action.payload\n        };\n      }\n    case ACTIONS.ADD_NODES:\n      {\n        const newNodes = getDiffNodes(action.payload, state.nodes);\n        const nodes = [...state.nodes, ...newNodes];\n        state.nodeHolder.add(newNodes);\n        return {\n          ...state,\n          nodes\n        };\n      }\n    case ACTIONS.ADD_EDGES:\n      {\n        const newEdges = getDiffEdges(action.payload, state.edges);\n        const edges = [...state.edges, ...newEdges];\n        state.edgeHolder.add(newEdges);\n        return {\n          ...state,\n          edges\n        };\n      }\n    case ACTIONS.SET_SELECTED_NODE:\n      {\n        const nodeId = action.payload;\n        let selectedNode = {};\n        if (nodeId !== null) {\n          selectedNode = findNodeById(state.nodes, nodeId);\n        }\n        return {\n          ...state,\n          selectedNode,\n          selectedEdge: {}\n        };\n      }\n    case ACTIONS.SET_SELECTED_EDGE:\n      {\n        const edgeId = action.payload;\n        let selectedEdge = {};\n        if (edgeId !== null) {\n          selectedEdge = findNodeById(state.edges, edgeId);\n        }\n        return {\n          ...state,\n          selectedEdge,\n          selectedNode: {}\n        };\n      }\n    case ACTIONS.REFRESH_NODE_LABELS:\n      {\n        const nodeLabelMap = _.mapValues(_.keyBy(action.payload, 'type'), 'field');\n        _.map(state.nodes, node => {\n          if (node.type in nodeLabelMap) {\n            const field = nodeLabelMap[node.type];\n            const label = node.properties[field];\n            state.nodeHolder.update({\n              id: node.id,\n              label: label\n            });\n            return {\n              ...node,\n              label\n            };\n          }\n          return node;\n        });\n        return state;\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["vis","_","ACTIONS","getDiffNodes","getDiffEdges","findNodeById","initialState","network","nodeHolder","DataSet","edgeHolder","nodes","edges","selectedNode","selectedEdge","reducer","state","action","type","CLEAR_GRAPH","clear","SET_NETWORK","payload","ADD_NODES","newNodes","add","ADD_EDGES","newEdges","SET_SELECTED_NODE","nodeId","SET_SELECTED_EDGE","edgeId","REFRESH_NODE_LABELS","nodeLabelMap","mapValues","keyBy","map","node","field","label","properties","update","id"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/reducers/graphReducer.js"],"sourcesContent":["import vis from 'vis-network';\nimport _ from 'lodash';\nimport { ACTIONS } from '../constants';\nimport { getDiffNodes, getDiffEdges, findNodeById } from '../logics/utils';\n\n// Initialize an Empty graph\nconst initialState = {\n  network: null,\n  nodeHolder: new vis.DataSet([]),\n  edgeHolder: new vis.DataSet([]),\n  nodes: [],\n  edges: [],\n  selectedNode: {},\n  selectedEdge: {},\n};\n// reducer: previous state, action returning the new state\nexport const reducer =  (state=initialState, action)=>{\n  switch (action.type){\n    case ACTIONS.CLEAR_GRAPH: {\n      state.nodeHolder.clear();\n      state.edgeHolder.clear();\n\n      return { ...state, nodes: [], edges: [], selectedNode:{}, selectedEdge: {} };\n    }\n    case ACTIONS.SET_NETWORK: {\n      return { ...state, network: action.payload };\n    }\n    case ACTIONS.ADD_NODES: {\n      const newNodes = getDiffNodes(action.payload, state.nodes);\n      const nodes = [...state.nodes, ...newNodes];\n      state.nodeHolder.add(newNodes);\n      return { ...state, nodes };\n    }\n    case ACTIONS.ADD_EDGES: {\n      const newEdges = getDiffEdges(action.payload, state.edges);\n      const edges = [...state.edges, ...newEdges];\n      state.edgeHolder.add(newEdges);\n      return { ...state, edges };\n    }\n    case ACTIONS.SET_SELECTED_NODE: {\n      const nodeId = action.payload;\n      let selectedNode = {};\n      if (nodeId !== null) {\n        selectedNode = findNodeById(state.nodes, nodeId);\n      }\n      return { ...state, selectedNode, selectedEdge: {} };\n    }\n    case ACTIONS.SET_SELECTED_EDGE: {\n      const edgeId = action.payload;\n      let selectedEdge = {};\n      if (edgeId !== null) {\n        selectedEdge = findNodeById(state.edges, edgeId);\n      }\n      return { ...state, selectedEdge, selectedNode: {} };\n    }\n    case ACTIONS.REFRESH_NODE_LABELS: {\n      const nodeLabelMap =_.mapValues( _.keyBy(action.payload, 'type'), 'field');\n      _.map(state.nodes, node => {\n        if (node.type in nodeLabelMap) {\n          const field = nodeLabelMap[node.type];\n          const label = node.properties[field];\n          state.nodeHolder.update({id:node.id, label: label});\n          return {...node, label };\n        }\n        return node;\n      });\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}