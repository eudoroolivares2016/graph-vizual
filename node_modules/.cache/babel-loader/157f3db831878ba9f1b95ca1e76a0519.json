{"ast":null,"code":"var _jsxFileName = \"/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport vis from 'vis-network';\nimport { ACTIONS } from '../../constants';\nclass NetworkGraph extends React.Component {\n  componentDidMount() {\n    const data = {\n      nodes: this.props.nodeHolder,\n      edges: this.props.edgeHolder\n    };\n    const network = new vis.Network(this.refs.myRef, data, this.props.networkOptions);\n    // If you select the node\n    network.on('selectNode', params => {\n      const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n      this.props.dispatch({\n        type: ACTIONS.SET_SELECTED_NODE,\n        payload: nodeId\n      });\n    });\n    // If you select the edge\n    network.on(\"selectEdge\", params => {\n      const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n      const isNodeSelected = params.nodes && params.nodes.length > 0;\n      if (!isNodeSelected && edgeId !== null) {\n        this.props.dispatch({\n          type: ACTIONS.SET_SELECTED_EDGE,\n          payload: edgeId\n        });\n      }\n    });\n    this.props.dispatch({\n      type: ACTIONS.SET_NETWORK,\n      payload: network\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: 'myRef',\n      className: 'mynetwork',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    });\n  }\n}\nexport const NetworkGraphComponent = connect(state => {\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);","map":{"version":3,"names":["React","connect","vis","ACTIONS","NetworkGraph","Component","componentDidMount","data","nodes","props","nodeHolder","edges","edgeHolder","network","Network","refs","myRef","networkOptions","on","params","nodeId","length","dispatch","type","SET_SELECTED_NODE","payload","edgeId","isNodeSelected","SET_SELECTED_EDGE","SET_NETWORK","render","NetworkGraphComponent","state","graph","options"],"sources":["/Users/eaolivar/git/gremlin-visualizer/src/components/NetworkGraph/NetworkGraphComponent.js"],"sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport vis from 'vis-network';\nimport { ACTIONS } from '../../constants';\n\nclass NetworkGraph extends React.Component{\n  componentDidMount() {\n    const data = {\n      nodes: this.props.nodeHolder,\n      edges: this.props.edgeHolder\n    };\n    \n    const network = new vis.Network(this.refs.myRef, data, this.props.networkOptions);\n    // If you select the node\n    network.on('selectNode', (params) => {\n      const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n      this.props.dispatch({ type: ACTIONS.SET_SELECTED_NODE, payload: nodeId });\n    });\n    // If you select the edge\n    network.on(\"selectEdge\", (params) => {\n      const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n      const isNodeSelected = params.nodes && params.nodes.length > 0;\n      if (!isNodeSelected && edgeId !== null) {\n        this.props.dispatch({ type: ACTIONS.SET_SELECTED_EDGE, payload: edgeId });\n      }\n    });\n\n    this.props.dispatch({ type: ACTIONS.SET_NETWORK, payload: network });\n  }\n\n  render(){\n    return (<div ref={'myRef'} className={'mynetwork'} />);\n  }\n}\n\nexport const NetworkGraphComponent = connect((state)=>{\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,OAAO,QAAO,aAAa;AACnC,OAAOC,GAAG,MAAM,aAAa;AAC7B,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,MAAMC,YAAY,SAASJ,KAAK,CAACK,SAAS;EACxCC,iBAAiB,GAAG;IAClB,MAAMC,IAAI,GAAG;MACXC,KAAK,EAAE,IAAI,CAACC,KAAK,CAACC,UAAU;MAC5BC,KAAK,EAAE,IAAI,CAACF,KAAK,CAACG;IACpB,CAAC;IAED,MAAMC,OAAO,GAAG,IAAIX,GAAG,CAACY,OAAO,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,EAAET,IAAI,EAAE,IAAI,CAACE,KAAK,CAACQ,cAAc,CAAC;IACjF;IACAJ,OAAO,CAACK,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;MACnC,MAAMC,MAAM,GAAGD,MAAM,CAACX,KAAK,IAAIW,MAAM,CAACX,KAAK,CAACa,MAAM,GAAG,CAAC,GAAGF,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;MAC/E,IAAI,CAACC,KAAK,CAACa,QAAQ,CAAC;QAAEC,IAAI,EAAEpB,OAAO,CAACqB,iBAAiB;QAAEC,OAAO,EAAEL;MAAO,CAAC,CAAC;IAC3E,CAAC,CAAC;IACF;IACAP,OAAO,CAACK,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;MACnC,MAAMO,MAAM,GAAGP,MAAM,CAACR,KAAK,IAAIQ,MAAM,CAACR,KAAK,CAACU,MAAM,KAAK,CAAC,GAAGF,MAAM,CAACR,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;MACjF,MAAMgB,cAAc,GAAGR,MAAM,CAACX,KAAK,IAAIW,MAAM,CAACX,KAAK,CAACa,MAAM,GAAG,CAAC;MAC9D,IAAI,CAACM,cAAc,IAAID,MAAM,KAAK,IAAI,EAAE;QACtC,IAAI,CAACjB,KAAK,CAACa,QAAQ,CAAC;UAAEC,IAAI,EAAEpB,OAAO,CAACyB,iBAAiB;UAAEH,OAAO,EAAEC;QAAO,CAAC,CAAC;MAC3E;IACF,CAAC,CAAC;IAEF,IAAI,CAACjB,KAAK,CAACa,QAAQ,CAAC;MAAEC,IAAI,EAAEpB,OAAO,CAAC0B,WAAW;MAAEJ,OAAO,EAAEZ;IAAQ,CAAC,CAAC;EACtE;EAEAiB,MAAM,GAAE;IACN,oBAAQ;MAAK,GAAG,EAAE,OAAQ;MAAC,SAAS,EAAE,WAAY;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EACvD;AACF;AAEA,OAAO,MAAMC,qBAAqB,GAAG9B,OAAO,CAAE+B,KAAK,IAAG;EACpD,OAAO;IACLtB,UAAU,EAAEsB,KAAK,CAACC,KAAK,CAACvB,UAAU;IAClCE,UAAU,EAAEoB,KAAK,CAACC,KAAK,CAACrB,UAAU;IAClCK,cAAc,EAAEe,KAAK,CAACE,OAAO,CAACjB;EAChC,CAAC;AACH,CAAC,CAAC,CAACb,YAAY,CAAC"},"metadata":{},"sourceType":"module"}